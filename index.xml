<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>https://maosuxi.github.io/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 May 2020 23:59:49 +0800</lastBuildDate>
    
	<atom:link href="https://maosuxi.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>异常</title>
      <link>https://maosuxi.github.io/%E5%BC%82%E5%B8%B8/</link>
      <pubDate>Sat, 09 May 2020 23:59:49 +0800</pubDate>
      
      <guid>https://maosuxi.github.io/%E5%BC%82%E5%B8%B8/</guid>
      <description>异常：一种导致程序中断执行的指令流。 try{ //可能出现异常的语句 }[catch(异常类型 异常对象){ }catch(异常类型 异常对象){ }&amp;hellip;] [finally{ //不管是否异常都要执行 }] try&amp;hellip;catch、try&amp;hellip;catch&amp;hellip;finally、try&amp;hellip;finally 获取异常的全部信息可以使用异常类的printStackTrace()方法。 public class Test { public static void main(String [] args){ System.out.println(&amp;ldquo;1.&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;quot;); try { int x=Integer.parseInt(args[0]); int y=Integer.parseInt(args[1]); System.out.println(&amp;ldquo;2.&amp;mdash;&amp;mdash;&amp;mdash;-&amp;ldquo;+(x/y)); } catch(ArithmeticException e){ e.printStackTrace(); } System.out.println(&amp;ldquo;3.&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;quot;); } } 即便有了异常处理语句，但是如果没有进行正确的异常捕获，那么程序也会导致中断，finally类的代码依然会执行，这样就必须使用多个异常捕获 处理多个异常 public static void main(String [] args){ Scanner in=new Scanner(System.in); System.out.println(&amp;ldquo;1.&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;quot;); try { int x=in.nextInt(); int y=in.nextInt(); System.out.println(&amp;ldquo;2.&amp;mdash;&amp;mdash;&amp;mdash;-&amp;ldquo;+(x/y)); } catch(ArithmeticException e){ e.printStackTrace(); } catch(InputMismatchException e){ e.printStackTrace(); } catch(ArrayIndexOutOfBoundsException e){ //System.out.println(e); e.</description>
    </item>
    
    <item>
      <title>单例化和多例化设计</title>
      <link>https://maosuxi.github.io/%E5%8D%95%E4%BE%8B%E5%8C%96%E5%92%8C%E5%A4%9A%E4%BE%8B%E5%8C%96%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Thu, 07 May 2020 23:55:04 +0800</pubDate>
      
      <guid>https://maosuxi.github.io/%E5%8D%95%E4%BE%8B%E5%8C%96%E5%92%8C%E5%A4%9A%E4%BE%8B%E5%8C%96%E8%AE%BE%E8%AE%A1/</guid>
      <description>单例设计模式（多例设计模式） 控制实例化对象产生个数的设计操作 单例设计模式：只能有一个实例化对象（在程序运行中将一直存在的实例化对象，并且不会改变） 构造方法私有化，类内部提供static方法获取实例化对象，这样不管外部如何怎么操作就只有一个实例化对象 class Singleton{//懒汉式,在系统自动加载的时候就会自动提供有Singleton类的实例化对象|class Singleton{//饿汉式,在第一次使用的时候进行实例化对象处理 private static final Singleton ISTANCE =new Singleton(); //私有的Singleton属性|private static Singleton instance; private Singleton() {}//构造方法私有化	|private Singleton(){} public static Singleton getInstance() {	|public static Single getInstance(){ return ISTANCE;	|	if(instance==null) }	|	{	instance =new Singleton();	} public void print() {	|	return instance;	} System.out.println(&amp;ldquo;单例化设计&amp;rdquo;);	|public void print(){	}	|	System.out.println(&amp;ldquo;单例化设计&amp;rdquo;);} | }	|	} public class Demo16 {
public static void main(String[] args) { // TODO Auto-generated method stub Singleton instance=null;//声明对象，并未实例化对象 instance=Singleton.</description>
    </item>
    
    <item>
      <title>枚举</title>
      <link>https://maosuxi.github.io/%E6%9E%9A%E4%B8%BE/</link>
      <pubDate>Thu, 07 May 2020 23:25:55 +0800</pubDate>
      
      <guid>https://maosuxi.github.io/%E6%9E%9A%E4%B8%BE/</guid>
      <description>枚举：定义有限个数对象的一种结构（多例设计），比多例设计更加简单，相较于多例设计使用枚举可以在程序编译时判断出实例化对象是否存在。 本质上是一个类，默认继承Enum类，枚举类中的构造方法不能采用非私有化定义（public无法使用），枚举对象要写在首行 protected Enum​(String name,int ordinal);//构造方法，name：名称，ordinal：序号 public final String name​();//获取名称 public final int ordinal​();//获取序号
enum aColor{ 红色,绿色,蓝色;//枚举对象只能写在首行 } public class Demo18 { public static void main(String[] args) { // TODO Auto-generated method stub aColor c=aColor.红色;//实例化对象 System.out.println(c);	|switch (c)	{//enum可与switch结合 for(aColor b:aColor.values())//aColor.values()获取枚举数值	|	case RED : System.out.println(&amp;ldquo;红色&amp;rdquo;);break; {	|	case BLUE : System.out.println(&amp;ldquo;蓝色&amp;rdquo;);break; System.out.println(b);	|	case RGREEN: System.out.println(&amp;ldquo;绿色&amp;rdquo;);break; }	|	default:break;} }	} 枚举应用以使用这种为主 与多例设计相比下面的更加简单 enum aColor{ RED(&amp;ldquo;红色&amp;rdquo;),GREEN(&amp;ldquo;绿色&amp;rdquo;),BLUE(&amp;ldquo;蓝色&amp;rdquo;);//类内调用构造方法,且只能写在首行 private String title; private aColor(String title) { this.</description>
    </item>
    
    <item>
      <title>Post</title>
      <link>https://maosuxi.github.io/post/</link>
      <pubDate>Thu, 07 May 2020 23:19:31 +0800</pubDate>
      
      <guid>https://maosuxi.github.io/post/</guid>
      <description>windows环境下的hugo博客搭建 1.安装hugo https://github.com/gohugoio/hugo/releases/上下载hugo，解压到自定义文件夹并添加到pth环境变量中 打开cmd进入hugo解压文件夹输入hugo version检查hogo是否安装成功如果出现Hugo Static Site Generator v0.65.3-211BA42A windows/amd64 BuildDate: 2020-02-23T09:58:40Z则已安装成功 2.用hugo创建博客 打开cmd输入hugo new site myblog(博客文件夹名称个人喜好) 3.下载并设置主题 https://themes.gohugo.io/选择自己喜好的主题下载(这里以m10c为例) cmd中进入所创建的博客根目录下的themes文件夹中 输入git clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c下载 在这里计算机中git一定要安装好 cd themes/ dir 可以发现下载安装好的主题文件 4.在本地启动个人博客 博客根目录中输入 hugo server -t m10c &amp;ndash;buildDrafts 进入 http://localhost:1313/可以发现基本的博客已经搭建好了 5.创建文章 cmd下进入根目录 hugo new post/blog.md cd content/ dir	可以看见文件夹中的文件 可在content/post/blog.md文件中直接写博客 进入博客根目录 cd ../.. 然后 hugo server -t m10c &amp;ndash;buildDrafts 访问 http://localhost:1313/就有内容了 6.将个人博客部署到远程服务端 进入github新建一个仓，名称必须是自己的昵称 cmd博客根目录下 hugo &amp;ndash;theme=m10c &amp;ndash;baseUrl=&amp;quot;https://maosuxi.github.io/&amp;rdquo; &amp;ndash;buildDrafts (新建仓的链接) 会生成一个public文件夹 cmd进入博客public文件夹下 git init git add .</description>
    </item>
    
    <item>
      <title>Blog</title>
      <link>https://maosuxi.github.io/blog/</link>
      <pubDate>Thu, 07 May 2020 23:11:14 +0800</pubDate>
      
      <guid>https://maosuxi.github.io/blog/</guid>
      <description>windows环境下的hugo博客搭建 1.安装hugo https://github.com/gohugoio/hugo/releases/上下载hugo，解压到自定义文件夹并添加到pth环境变量中 打开cmd进入hugo解压文件夹输入hugo version检查hogo是否安装成功如果出现Hugo Static Site Generator v0.65.3-211BA42A windows/amd64 BuildDate: 2020-02-23T09:58:40Z则已安装成功 2.用hugo创建博客 打开cmd输入hugo new site myblog(博客文件夹名称个人喜好) 3.下载并设置主题 https://themes.gohugo.io/选择自己喜好的主题下载(这里以m10c为例) cmd中进入所创建的博客根目录下的themes文件夹中 输入git clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c下载 在这里计算机中git一定要安装好 cd themes/ dir 可以发现下载安装好的主题文件 4.在本地启动个人博客 博客根目录中输入 hugo server -t m10c &amp;ndash;buildDrafts 进入 http://localhost:1313/可以发现基本的博客已经搭建好了 5.创建文章 cmd下进入根目录 hugo new post/blog.md cd content/ dir	可以看见文件夹中的文件 可在content/post/blog.md文件中直接写博客 进入博客根目录 cd ../.. 然后 hugo server -t m10c &amp;ndash;buildDrafts 访问 http://localhost:1313/就有内容了 6.将个人博客部署到远程服务端 进入github新建一个仓，名称必须是自己的昵称 cmd博客根目录下 hugo &amp;ndash;theme=m10c &amp;ndash;baseUrl=&amp;quot;https://maosuxi.github.io/&amp;rdquo; &amp;ndash;buildDrafts (新建仓的链接) 会生成一个public文件夹 cmd进入博客public文件夹下 git init git add .</description>
    </item>
    
  </channel>
</rss>